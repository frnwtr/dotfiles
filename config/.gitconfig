[user]
	# Please update these with your information
	name = Your Name
	email = your.email@example.com

[core]
	editor = code --wait
	autocrlf = input
	safecrlf = true
	excludesfile = ~/.gitignore_global
	pager = delta

[interactive]
	diffFilter = delta --color-only

[delta]
	navigate = true    # use n and N to move between diff sections
	light = false      # set to true if you're in a terminal w/ a light background color (e.g. the default macOS terminal)
	side-by-side = true
	line-numbers = true

[merge]
	conflictstyle = diff3

[diff]
	colorMoved = default

[init]
	defaultBranch = main

[push]
	default = simple
	autoSetupRemote = true

[pull]
	rebase = false

[branch]
	autosetuprebase = always

[color]
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red
	new = green

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

[alias]
	# Basic shortcuts
	st = status
	co = checkout
	br = branch
	ci = commit
	ca = commit -a
	cm = commit -m
	cam = commit -am
	
	# More complex aliases
	unstage = reset HEAD --
	last = log -1 HEAD
	visual = !gitk
	
	# Pretty logs
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	lga = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --all
	
	# Show files ignored by git
	ign = ls-files -o -i --exclude-standard
	
	# Assume a file as unchanged
	assume = update-index --assume-unchanged
	unassume = update-index --no-assume-unchanged
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"
	
	# Delete branches that have already been merged with main
	dm = "!git branch --merged | grep -v '\\*\\|main\\|master\\|develop' | xargs -n 1 git branch -d"
	
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	
	# Amend the currently staged files to the latest commit
	amend = commit --amend --reuse-message=HEAD
	
	# Credit an author on the latest commit
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	
	# Interactive rebase with the given number of latest commits
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	
	# Remove branches that have already been merged with main
	# a.k.a. 'delete merged'
	dm = "!git branch --merged | grep -v '\\*\\|main\\|master\\|develop' | xargs -n 1 git branch -d"
	
	# List contributors with number of commits
	contributors = shortlog --summary --numbered
	
	# Show the user email for the current repository
	whoami = config user.email

[help]
	# Automatically correct and execute mistyped commands
	autocorrect = 1

[credential]
	helper = osxkeychain

[gpg]
	program = gpg

[commit]
	# Sign commits using GPG key (optional)
	# gpgsign = true

[tag]
	# Sign tags using GPG key (optional)
	# gpgsign = true

# URL shorthands
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
	insteadOf = "github:"

[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
	insteadOf = "gist:"

# Work with GitHub PRs
[remote "origin"]
	fetch = +refs/pull/*/head:refs/remotes/origin/pr/*

# Include local settings
[include]
	path = ~/.gitconfig.local